/*
 * Zzish JavaScript SDK
 *
 */

module.exports = Sessions;
var utils = require('./utils');

function Sessions(proxy){
	this.proxy = proxy;
	this.paths = proxy.config.paths;
}

Sessions.prototype.create = function(data, callback) {
	var proxy = this.proxy;
	var request = {
		url: this.proxy.buildUrl(this.paths.session),
		data: data
	};
	this.proxy.ajax( request, function (err, res) {
		if (err) {
			callback(err, res);
		} else {
			var session = new Session(res, proxy);
			callback(err, session);
		}
	});
};

function Session(data, proxy){
	utils.decorateInstance(this, data, proxy);
	this.activities = new ActivityInstances(proxy, data.id);
}

Session.prototype.stop = function(callback) {
	var request = {
		url: this.__proxy.buildUrl(this.__paths.session, this.id),
		data: {id: this.id}
	};
	this.__proxy.ajax(request, callback);
};

function ActivityInstances(proxy, sessionId){
	this.proxy = proxy;
	this.paths = proxy.config.paths;
	this.sessionId = sessionId;
}

ActivityInstances.prototype.create = function(activityInstance, callback){
	if (typeof activityInstance === 'object') {
		activityInstance.sessionId = this.sessionId;
	}
	var proxy = this.proxy;
	var request = {
		url: this.proxy.buildUrl(this.paths.activities),
		data: activityInstance
	};
	proxy.ajax(request, function(err, res) {
		if (err) {
			callback(err, res);
		} else {
			callback(err, new ActivityInstance(res, proxy));
		}
	});
};

function ActivityInstance(data, proxy) {
	utils.decorateInstance(this, data, proxy);
	this.actions = new Actions(this, proxy);
}

ActivityInstance.prototype.pause = function(callback) {
	var url = this.__proxy.buildUrl(this.__paths.activities, this.id, 'pause');
	this.__proxy.ajax ({url: url,	data: {sessionId: this.sessionId, activityId: this.id}}, callback,'activities');
};

ActivityInstance.prototype.resume = function(callback) {
	var url = this.__proxy.buildUrl(this.__paths.activities, this.id, 'resume');
	this.__proxy.ajax ({url: url,	data: {sessionId: this.sessionId, activityId: this.id}}, callback, 'activities');
};

ActivityInstance.prototype.stop = function(callback) {
	var url = this.__proxy.buildUrl(this.__paths.activities, this.id, 'stop');
	this.__proxy.ajax ({url: url,	data: {sessionId: this.sessionId, activityId: this.id}}, callback, 'activities');
};

ActivityInstance.prototype.actions = function(data,callback) {
	var url = this.__proxy.buildUrl(this.__paths.activities, this.id, 'actions');
	this.__proxy.ajax ({url: url,	data: data}, callback, 'activities');
};

function Actions(data, proxy){
	utils.decorateInstance(this, {sessionId: data.sessionId, activityId: data.id}, proxy);
}

Actions.prototype.create = function(data, callback){
	var url = this.__proxy.buildUrl(this.__paths.activities, this.activityId, this.__paths.actions);
	if (typeof data === 'object') {
		data.sessionId = this.sessionId;
		data.activityId = this.activityId;
	}
	this.__proxy.ajax({url: url, data: data}, callback, 'actions');
};
