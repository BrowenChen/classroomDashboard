/*
 * Zzish JavaScript SDK
 * 
 * 
 *	TODO
 * 	- check if /secure for api is working correctly
 */

module.exports = Users;

var utils = require('./utils');
var config = require('./config');

function Users(proxy){
	utils.decorateInstance(this, {}, proxy);
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

																	USER SDK

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 

/* * * * 
Create

eg params: UserObject
return: UserObject
* * * */

Users.prototype.create = function (data, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.secureusers),
		data: data
	};

	if(config.log) console.log('request.url: ' + request.url);

	proxy.ajax( request, function (err, res) {
		if (err) {
			if(config.log) console.log('response of craete graph:' + JSON.stringify(res));
			callback(err, res);
		} else {
			var user = new User(res, proxy);
			callback(err, user);
		}
	});
};

/* * * * 
Get

eg params: user_id
return: UserObject
* * * */

Users.prototype.get = function(id, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.secureusers, id),
		method: "GET",
		data: {}
	};
	
	console.log(request.url);

	proxy.ajax( request, function (err, res) {
		if (err) {
			callback(err, res);
		} else {
			console.log('get res in sdk: ' + JSON.stringify(res));
			var user = new User(res, proxy);
			callback(err, user);
		}
	});
};

Users.prototype.getUserByVerifyCode = function(verifyCode, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.secureusers, 'custom/search'),
		data: {verifyCode: verifyCode}
	};
	
	console.log(request.url);

	proxy.ajax( request, function (err, res) {
		if (err) {
			callback(err, res);
		} else {
			console.log('get res in sdk: ' + JSON.stringify(res));
			var user = new User(res, proxy);
			callback(err, user);
		}
	});
};

Users.prototype.getUserByCode = function(code, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.secureusers, 'custom/search'),
		data: {code: code}
	};
	
	console.log(request.url);

	proxy.ajax( request, function (err, res) {
		if (err) {
			callback(err, res);
		} else {
			console.log('get res in sdk: ' + JSON.stringify(res));
			var user = new User(res, proxy);
			callback(err, user);
		}
	});
};

Users.prototype.checkUserByEmail = function(email, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.secureusers, 'custom/search'),
		data: {email: email}
	};
	
	console.log(request.url);

	proxy.ajax( request, function (err, res) {
		if (err) {
			callback(err, res);
		} else {
			console.log('get res in sdk: ' + JSON.stringify(res));
			var user = new User(res, proxy);
			callback(err, user);
		}
	});
};

Users.prototype.createChild = function(parentId, childData, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.secureusers, parentId, 'children'),
		data: childData
	};

	console.log('create child request.url: ' + request.url);

	proxy.ajax( request, function (err, res) {
		if (err) {
			if(config.log) console.log('response of craete graph:' + JSON.stringify(res));
			callback(err, res);
		} else {
			var user = new User(res, proxy);
			callback(err, user);
		}
	});
};

Users.prototype.updateChild = function(parentId, childId, childData, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.secureusers, parentId, 'children', childId),
		method: "POST",
		data: childData
	};

	console.log('update child request.url: ' + request.url);

	proxy.ajax( request, function (err, res) {
		if (err) {
			if(config.log) console.log('update Child response: ' + JSON.stringify(res));
			callback(err, res);
		} else {
			var user = new User(res, proxy);
			callback(err, user);
		}
	});
};


function User(data, proxy) {
	utils.decorateInstance(this, data, proxy);
}


/* * * * 
Update

eg params: updatedObject
return: newUserObject
* * * */

Users.prototype.update = function (id, data, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.secureusers, id),
		data: data
	};

	if(config.log) console.log('request.url: ' + request.url);

	proxy.ajax( request, function (err, res) {
		if (err) {
			callback(err, res);
		} else {
			var user = new User(res, proxy);
			callback(err, user);
		}
	});
};

/* * * * 
Login

-> this is to authenticate the user as well as check how long users are active

@params: username, password
return: token, message
* * * */

Users.prototype.auth = function (email, password, classroomMode, tokenId, callback) {
	var data = {
		email: email,
		password: password,
		classroomMode: classroomMode
	}

	if(tokenId != false){
		data.tokenId= token;
	}

	var url = this.__proxy.buildUrl(this.__paths.secureusers,'custom/search');
	if(config.log) console.log(url);

	this.__proxy.ajax ({url: url, data: data}, function(err, res) {
		if (err === null) {
			if(config.log) console.log('no error, res' + JSON.stringify(res));
			callback(res);
		} else {
			callback(err);
		}
	});
};

Users.prototype.logout = function (callback) {
	var url = this.proxy.buildUrl(this.paths.users, data.username, data.password);
	this.proxy.ajax ({url: url, data: data}, callback);
};


Users.prototype.verifyByCode = function(verifyCode, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.secureusers, 'custom/search'),
		data: {verifyCode: verifyCode}
	};
	
	console.log(request.url);

	proxy.ajax( request, function (err, res) {
		if (err) {
			callback(err, res);
		} else {
			console.log('get res in sdk - verifyByCode: ' + JSON.stringify(res));
			var user = new User(res, proxy);
			callback(err, user);
		}
	});
};

Users.prototype.verifyByShortCode = function(verifyCode, token, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.secureusers, 'custom/search'),
		data: {code: verifyCode, tokenId:token}
	};
	
	console.log(request.url);

	proxy.ajax( request, function (err, res) {
		if (err) {
			callback(err, res);
		} else {
			console.log('get res in sdk - verifyByCode: ' + JSON.stringify(res));
			var user = new User(res, proxy);
			callback(err, user);
		}
	});
};

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

																	Mobile

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 

Users.prototype.tokenAuth = function (token, callback) {
	var proxy = this.__proxy; 
	var request = {
		url: this.__proxy.buildUrl('tokens/' + token + '/searchtoken'),
		method: "GET",
		data: {}
	};

	console.log(request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('no error, res' + JSON.stringify(res));
			callback(res);
		} else {
			callback(err);
		}
	});

};

Users.prototype.updateToken = function (token, groupId, callback) {
	var proxy = this.__proxy; 
	var request = {
		url: this.__proxy.buildUrl('tokens' , token),
		method: "POST",
		data: {groupId: groupId}
	};

	console.log(request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('no error, res' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err, res);
		}
	});

};


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

																	DEVELOPER DASHBOARD

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 

/* * * * 
Gets data about to populate graph

@params: axis, yaxis, topic, (long in seconds) startmonth start year, (long in seconds) end month, end year
return:  id of graph

//nb NOW: 1402657194
// 2011 - 1325376000
* * * */


Users.prototype.creategraph = function(data, callback) {
	var url = this.__proxy.buildUrl('graphs', 'secure');
	if(config.log) console.log(url);

	this.__proxy.ajax ({url: url, data: data}, function(err, res) {
		if (err === null) {
			if(config.log) console.log('create graph - res: ' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err);
		}
	});

}

/* * * * 
Gets data from about to populate graph

@params: user token
return:  [] {axis, yaxis, topic, startmonth, start year, end month, end year}
* * * */

User.prototype.graphsettings = function(id, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.secureusers,'graphsettings'),
		method: "GET",
		data: id
	};

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			callback(err, res);
		} else {
			callback(err);
		}
	});

}

//definition
Users.prototype.getgraph = function(data, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.secureusers, data.userId, 'graphs', data.graphId),
		method: "GET",
		data: {}
	};

	console.log('url: ' + request.url)

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Get graph response:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err);
		}
	});
}

//update definition
User.prototype.updategraph = function (callback) {

};

//get all graph definitions

//get actual data and defintions - get user ID
Users.prototype.getdashboard = function(data, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.secureusers, data.userId, 'dashboard'),
		method: "GET",
		data: {}
	};

	console.log('url: ' + request.url);
	console.log('req: ' + JSON.stringify(request));

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Get dashboard response:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err);
		}
	});
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

																		APP STUFF

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 

Users.prototype.setAppLive = function (id, callback) {
	//api/secure/apps/{id}
	var proxy = this.__proxy; 
	var request = {
		url: proxy.buildUrl(this.__paths.api, 'secure', 'apps', id),
		method: "POST",
		data: {live: true}
	};

	console.log(request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Creating app - no error, res:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err, res);
		}
	});
};

Users.prototype.setAppStage = function (id, callback) {
	var proxy = this.__proxy; 
	var request = {
		url: proxy.buildUrl(this.__paths.api, 'secure', 'apps', id),
		method: "POST",
		data: {live: false}
	};

	console.log(request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Creating app - no error, res:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err, res);
		}
	});
};

Users.prototype.getApp = function (id, callback) {
	var proxy = this.__proxy; 
	var request = {
		url: proxy.buildUrl(this.__paths.apps, id),
		method: "POST",
		data: {}
	};

	console.log('Get app - ' + request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			console.log('Getting app - no error, res:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err, res);
		}
	});
};

Users.prototype.getAllLiveApps = function (callback) {
	var proxy = this.__proxy; 
	var request = {
		url: proxy.buildUrl(this.__paths.apps),
		method: "GET",
		data: {}
	};

	console.log('Get app - ' + request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			console.log('Getting app - no error, res:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err, res);
		}
	});
};

Users.prototype.updateApp = function (id, data, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.apps, id),
		method: "POST",
		data: data
	};

	if(config.log) console.log('request.url: ' + request.url);

	proxy.ajax( request, function (err, res) {
		if (err) {
			if(config.log) console.log('response of update App in SDK:' + JSON.stringify(res));
			callback(err, res);
		} else {
			var user = new User(res, proxy);
			callback(err, user);
		}
	});
};

Users.prototype.createApp = function (id, data, callback) {
	var proxy = this.__proxy; 
	var request = {
		url: proxy.buildUrl(this.__paths.secureusers, id, 'apps'),
		method: "POST",
		data: data
	};

	console.log('create app LIVE - ' + request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Creating app - no error, res:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err, res);
		}
	});
};

Users.prototype.createAppSandbox = function (id, data, callback) {
	var proxy = this.__proxy; 
	var request = {
		url: 'http://sandbox.zzish.com/api/secure/users/' + id + '/apps',
		method: "POST",
		data: data
	};

	console.log('create app SANDBOX - ' + request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Creating app Sandbox- no error, res:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err, res);
		}
	});
};

Users.prototype.getAllApps = function(id, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.secureusers, id, 'apps'),
		method: "GET",
		data: {}
	};

	console.log('url: ' + request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Get all apps response:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err);
		}
	});
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

																	CLASSROOM / GROUPS

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 


Users.prototype.getAllGroups = function(id, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.secureusers, 'groups', id),
		method: "GET",
		data: {}
	};

	console.log('url: ' + request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Get dashboard response:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err);
		}
	});
}

Users.prototype.getGroup = function(id, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl('secure', 'groups', id),
		method: "GET",
		data: {}
	};

	console.log('url: ' + request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			callback(err, res);
		} else {
			callback(err);
		}
	});
}

Users.prototype.getGroupByCode = function(code, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl('secure', 'groups', 'code', code),
		method: "GET",
		data: {}
	};

	console.log('url: ' + request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			callback(err, res);
		} else {
			callback(err);
		}
	});
}



//Creates a single group
//Name, joinByCode('true/flase'), year
Users.prototype.createGroup = function(id, data, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.secureusers, id, 'groups'),
		method: "POST",
		data: data
	};

	console.log('url: ' + request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Get dashboard response:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err);
		}
	});
}

//add member to group
Users.prototype.addMemberToGroupByCode = function(id, code, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl('secure', 'groups', id, 'members', code),
		method: "POST",
		data: {}
	};

	console.log('url: ' + request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			callback(err, res);
		} else {
			callback(err);
		}
	});
}

//add user to group - post JSON object of said user
Users.prototype.createNewUserToGroup  = function(id, data, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl('secure', 'groups', id, 'members'),
		method: "POST",
		data: data
	};

	console.log('url: ' + request.url);
	console.log(JSON.stringify(request.data));

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			callback(err, res);
		} else {
			callback(err);
		}
	});
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

																	CLASSROOM / GROUPS - Apps

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 

Users.prototype.addGroupActivity = function(classId, data, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl('secure', 'groups', id, 'activity', activityId),
		method: "POST",
		data: data
	};

	console.log('url: ' + request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Get dashboard response:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err);
		}
	});
}

Users.prototype.addActivityToGroup = function(id, activityId, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl('secure', 'groups', id, 'activities', activityId),
		method: "POST",
		data: {}
	};

	console.log('url: ' + request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Get addActivityToGroup response:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err);
		}
	});
}

Users.prototype.getActivityByGroupId = function(groupId, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl('secure', 'groups', groupId, 'activities'),
		method: "GET",
		data: {}
	};

	console.log('url: ' + request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Get app activity response:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err);
		}
	});
}

Users.prototype.getActivityByAppId = function(appid, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl('secure', 'apps', appid, 'activities'),
		method: "GET",
		data: {}
	};

	console.log('url: ' + request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Get app activity response:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err);
		}
	});
}

Users.prototype.addActivity = function(appid, data, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl('secure', 'apps', appid, 'activities'),
		method: "POST",
		data: data
	};

	console.log('url: ' + request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Get app activity response:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err);
		}
	});
}

Users.prototype.addAppToClass = function(id, appId, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl('secure', 'groups', id, 'apps', appId),
		method: "POST",
		data: {}
	};

	console.log('url: ' + request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Get dashboard response:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err);
		}
	});
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

																	D A S H B O A R D

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 

Users.prototype.dashboardInit = function(groupId, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl('secure', 'groups', groupId, 'livePerformance'),
		method: "GET",
		data: {}
	};

	console.log('url: ' + request.url);

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Get dashboardInit response:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err);
		}
	});
}
